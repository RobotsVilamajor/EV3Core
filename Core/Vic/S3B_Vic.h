#pragma config(Sensor, S2,     ,               sensorEV3_Gyro, modeEV3Gyro_RateAndAngle)
#pragma config(Sensor, S3,     ,               sensorEV3_Color)
#pragma config(Sensor, S4,     ,               sensorEV3_Color)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

// Motors:
//	Rigth: motorB
//	Left: motorC

// Wall:
// 	Vertical: motorD
//	Horizontal: motorA

// Fwd - Forward; Bwd - Backward. Recta direction definitions
// Lft - Left; Rgt - Right. Turns direction definitions

// From max side to middle: 1.2
// From max up to down: 2.65
// Recta(Direction, Count, Power)
// Turn(Direction, Angle, Power)
// Align(Direction, Time)
// MoveMotor(Motor, Count, Power)
// MoveMotorAsync(Motor, Count, Power)

// ROBOPRO || VEATRIZ
//#define ROBOPRO

#include "Core/Core.h"

//#include "Sortida_2bR.h"
//#include "Sortida_2bR_Short.h"
//#include "Sortida_3R.h"
//#include "Sortida_4_Robopro.h"
void Align_S4()
{
	flushButtonMessages();
	MoveMotorTime(motorD, 2, 70);
	MoveMotorTime(motorA, 4, -30);
	MoveMotor(motorD, 2.5, -50);
	//MoveMotor(motorA, 1.7, 30);
}
void Sortida_4()
{
	//màxim esquerra 0.7 voltes a dalt
	//MoveMotorAsync(motorD, 0.7, 30);
	//MoveMotor(motorA, -1, 50);
	flushButtonMessages();
	waitForButtonPress();
	resetGyro(S2);
	delay(100);
	MoveMotorAsync(motorD, 0.7, 50);
	MoveMotorAsync(motorA, 1.7, 50);
	Recta(Fwd, 1.5, 40, false, false, 1, 0.93); //0.9
	FollowLine(2.5, 40, Rgt, Lft, false, false, 45, 0.7, 50, 0.2);  //0.9, 60, 0.1 // primer tram
	MoveMotorAsync(motorD, 0.45, -50);//0.7
	MoveMotorAsync(motorA, 0.5, -50); //0.8
	FollowLine(2.5, 50, Rgt, Lft, false, false, 60, 0.35, 40, 0.1);  //0.4, 35, 0.1// segon tram
	WaitForLine(Fwd, 10, 20, Lft, false);   // Detectem banc
	MoveMotorAsync(motorD, 0.88, -50);
	Recta(Fwd, 0.4, 30, false, false); //0.5 // ens posicionem per deixar helicopter
	setMotorSpeed(motorB, 0);
	setMotorSpeed(motorC, 0);
	//deixem peça
	//MoveMotor(motorA, 0.3, 40); //1
	//MoveMotor(motorD, 0.02, 40);


	MoveMotor(motorA, 0.8, 70);
	//Cercle blau
	MoveMotorAsync(motorD, 0.7, 70);
	//MoveMotor(motorA, 0.3, 40);
	//Turn(15, 20, Lft);
	FollowLine(0.5, 40, Rgt, Lft, false, false, 65,  0.7, 50, 0.2); //0.5, 50 //0.7, 50, 0.12
	FollowLine(0.8, 40, Rgt, Lft, false, false, 65,  0.35, 35, 0.1); //0.5, 50 //0.4, 40
	MoveMotor(motorD, 0.4, 40);
	MoveMotorAsync(motorA, 1.5, -70);
	FollowLine(0.9, 40, Rgt, Lft, false, false, 65,  0.35, 35, 0.1); //0.5, 50 //1.1 //0.4, 40
	setMotorSpeed(motorB, 0);
	setMotorSpeed(motorC, 0);

	MoveMotor(motorD, 1, 70);
	MoveMotorAsync(motorD, 1.2, 70);//2.6
	//resetGyro(S2);
	Recta(Bwd, 1, 50,false, false);
	Turn(-49, 30, Rgt); //32 //-50
	MoveMotorAsync(motorA, 1.6, 60);
	//MoveMotorAsync(motorD, -1, 40); //-1.2
	Recta(Bwd, 2.3, 70, false, false);
	WaitForLine(Bwd, 10, 30, Lft);   // Detectem banc
	Turn(40, 30, Lft); //30
	WaitForBlack3(Fwd, 10, 20, Lft, false);   // Detectem banc
	//MoveMotorAsync(motorD, -3.6, 50); //-3
	Recta(Fwd, 0.55, 40, false, true); //0.52
	MoveMotor(motorD, -3.6, 50);

	MoveMotor(motorA, 2, -70);
	MoveMotorAsync(motorA, 0.4, -70)
	//MoveMotorTime(motorA, 2.5, -40);
	MoveMotor(motorD, 2, 70);
	//resetGyro(S2);
	while(getColorReflected(S3) > 20){
		setMotorSpeed(motorB, -40);
		setMotorSpeed(motorC, -17);
	}
	setMotorSpeed(motorB, 0);
	setMotorSpeed(motorC, 0);
	if (getGyroDegrees(S2) > 133)
		Turn(130, 60, Rgt);
	else if (getGyroDegrees(S2) < 127)
		Turn(130, 60, Lft);

	//Turn(90, 20, Lft);
	MoveMotorAsync(motorA, 1.5, 70); //1.2
	MoveMotorAsync(motorD, -2.1, 70);
	Recta(Bwd, 1.1, 50, true, true);

	//MoveMotor(motorD, -1, 40);

	//MoveMotorAsync(motorA, 0.2, 40);
	//MoveMotor(motorD, -1.1, 40);
	//MoveMotorTime(motorA, 0.5, 20);

	Recta(Fwd, 0.55, 30, false, false);
	WaitForBlack(Fwd, 10, 20, Lft);
	delay(150);// Detectem banc
	MoveMotor(motorD, 1.2, 70);
	flushButtonMessages();
	waitForButtonPress();

}
